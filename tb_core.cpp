#include <math.h>
#include <stdio.h>
#include"imu_ukf.h"

/*
const float data_set[100][9] = {{-0.00250244140625000,	-0.0263671875000000,	0.963256835937500,	0.332514101531023,	0.584085414987913,	-0.698589846897663,	0.000123244741039951,	0.000160754010052109,	-0.000338923037859864},
	{0.00256347656250000,	-0.0264892578125000,	0.972167968750000,	0.313336019339243,	0.578444802578566,	-0.691821112006447,	0.000147357842547767,	0.000158074776551241,	-0.000368394606369417},
	{-0.00152587890625000,	-0.0264282226562500,	0.972778320312500,	0.311079774375504,	0.590854149879130,	-0.674335213537470,	0.000144678609046898,	0.000186206728310360,	-0.000354998438865075},
	{0.000488281250000000,	-0.0271606445312500,	0.973693847656250,	0.320668815471394,	0.585213537469783,	-0.671232876712329,	0.000141999375546030,	0.000192904812062531,	-0.000388488857625931},
	{-0.000183105468750000,	-0.0255737304687500,	0.974731445312500,	0.325745366639807,	0.585777598710717,	-0.667848509266720,	0.000155395543050372,	0.000158074776551241,	-0.000396526558128536},
	{0.000488281250000000,	-0.0253295898437500,	0.973510742187500,	0.323489121676068,	0.586341659951652,	-0.670950846091862,	0.000112527807036477,	0.000171470944055583,	-0.000352319205364206},
	{-0.000732421875000000,	-0.0260009765625000,	0.969665527343750,	0.309387590652700,	0.593110394842869,	-0.687872683319903,	0.000123244741039951,	0.000186206728310360,	-0.000360356905866812},
	{0.00219726562500000,	-0.0245971679687500,	0.975097656250000,	0.320668815471394,	0.594238517324738,	-0.676027397260274,	0.000151376692799070,	0.000168791710554715,	-0.000357677672365943},
	{0.00164794921875000,	-0.0258789062500000,	0.973815917968750,	0.318976631748590,	0.582393231265109,	-0.672078968573731,	0.000133961675043424,	0.000199602895814702,	-0.000388488857625931},
	{0.000854492187500000,	-0.0258178710937500,	0.973144531250000,	0.318412570507655,	0.584649476228848,	-0.685616438356165,	0.000136640908544293,	0.000168791710554715,	-0.000353658822114640},
	{-0.00128173828125000,	-0.0252075195312500,	0.974670410156250,	0.319540692989525,	0.587469782433521,	-0.678001611603546,	0.000144678609046898,	0.000186206728310360,	-0.000364375756118114},
	{0.000732421875000000,	-0.0248413085937500,	0.975341796875000,	0.319540692989525,	0.571676067687349,	-0.681950040290089,	0.000125923974540819,	0.000148697459298201,	-0.000352319205364206},
	{0.000915527343750000,	-0.0249633789062500,	0.974243164062500,	0.319540692989525,	0.583521353746978,	-0.665310233682514,	0.000140659758795596,	0.000188885961811228,	-0.000330885337357258},
	{-0.0146484375000000,	-0.0268554687500000,	0.971435546875000,	0.325745366639807,	0.579008863819501,	-0.699435938759065,	0.000127263591291253,	0.000160754010052109,	-0.000395186941378102},
	{0.00109863281250000,	-0.0280151367187500,	0.974548339843750,	0.315592264302982,	0.569983883964545,	-0.695205479452055,	8.97543222790944e-05,	0.000183527494809491,	-0.000377771923622457},
	{-6.10351562500000e-05,	-0.0272216796875000,	0.972839355468750,	0.330821917808219,	0.591982272360999,	-0.676873489121676,	0.000132622058292990,	0.000179508644558189,	-0.000369734223119851},
	{0.00103759765625000,	-0.0244750976562500,	0.972717285156250,	0.315592264302982,	0.579572925060435,	-0.666438356164384,	0.000166112477053846,	0.000188885961811228,	-0.000344281504861601},
	{-0.000366210937500000,	-0.0243530273437500,	0.975646972656250,	0.306567284448026,	0.592546333601934,	-0.693795326349718,	0.000139320142045161,	0.000155395543050372,	-0.000391168091126799},
	{0.000488281250000000,	-0.0256958007812500,	0.973815917968750,	0.321796937953264,	0.594238517324738,	-0.679411764705883,	0.000128603208041687,	0.000152716309549504,	-0.000383130390624194},
	{0.00225830078125000,	-0.0259399414062500,	0.975646972656250,	0.319540692989525,	0.585213537469783,	-0.663900080580177,	0.000124584357790385,	0.000186206728310360,	-0.000372413456620720},
	{0.00158691406250000,	-0.0250854492187500,	0.972961425781250,	0.318412570507655,	0.576188557614827,	-0.661361804995971,	0.000121905124289516,	0.000162093626802544,	-0.000372413456620720},
	{-0.00109863281250000,	-0.0263671875000000,	0.975280761718750,	0.326309427880741,	0.584085414987913,	-0.663053988718775,	0.000131282441542556,	0.000148697459298201,	-0.000365715372868549},
	{-0.000366210937500000,	-0.0235595703125000,	0.973449707031250,	0.328565672844480,	0.569983883964545,	-0.663053988718775,	0.000119225890788648,	0.000178169027807754,	-0.000375092690121588},
	{0.00122070312500000,	-0.0249633789062500,	0.974426269531250,	0.332514101531023,	0.586341659951652,	-0.682796132151491,	0.000127263591291253,	0.000182187878059057,	-0.000375092690121588},
	{-6.10351562500000e-05,	-0.0250244140625000,	0.974121093750000,	0.316720386784851,	0.572240128928284,	-0.679975825946817,	0.000128603208041687,	0.000183527494809491,	-0.000373753073371154},
	{-0.000732421875000000,	-0.0235595703125000,	0.971679687500000,	0.321796937953264,	0.589726027397260,	-0.682232070910556,	0.000141999375546030,	0.000192904812062531,	-0.000367054989618983},
	{0.0150146484375000,	-0.0231323242187500,	0.971313476562500,	0.326873489121676,	0.584649476228848,	-0.667284448025786,	9.77920227816998e-05,	0.000154055926299938,	-4.01885025130273e-05},
	{-0.000427246093750000,	-0.0264892578125000,	0.976684570312500,	0.328565672844480,	0.595930701047542,	-0.697743755036261,	0.000128603208041687,	0.000170131327305149,	-0.000395186941378102},
	{0.000549316406250000,	-0.0247192382812500,	0.973999023437500,	0.309387590652700,	0.589726027397260,	-0.660233682514102,	0.000133961675043424,	0.000139320142045161,	-0.000380451157123325},
	{0.000183105468750000,	-0.0239868164062500,	0.974853515625000,	0.303182917002417,	0.587469782433521,	-0.673771152296535,	0.000133961675043424,	0.000147357842547767,	-0.000389828474376365},
	{0.000732421875000000,	-0.0243530273437500,	0.975158691406250,	0.317848509266720,	0.567727639000806,	-0.661361804995971,	0.000119225890788648,	0.000207640596317308,	-2.14338680069479e-05},
	{6.10351562500000e-05,	-0.0249633789062500,	0.974426269531250,	0.312207896857373,	0.580136986301370,	-0.686744560838034,	0.000103150489783437,	0.000182187878059057,	-0.000380451157123325},
	{-0.000732421875000000,	-0.0238647460937500,	0.975708007812500,	0.317848509266720,	0.590854149879130,	-0.685334407735697,	0.000159414393301675,	0.000192904812062531,	-0.000399205791629405},
	{0.000671386718750000,	-0.0257568359375000,	0.975036621093750,	0.306003223207091,	0.586341659951652,	-0.687026591458501,	0.000160754010052109,	0.000158074776551241,	-0.000377771923622457},
	{0.00109863281250000,	-0.0251464843750000,	0.974975585937500,	0.317848509266720,	0.589161966156326,	-0.684770346494762,	0.000160754010052109,	0.000231753697825124,	-0.000364375756118114},
	{0.000366210937500000,	-0.0254516601562500,	0.974975585937500,	0.324617244157937,	0.594802578565673,	-0.672360999194198,	0.000129942824792122,	0.000170131327305149,	-0.000342941888111167},
	{0.00109863281250000,	-0.0246582031250000,	0.978027343750000,	0.307695406929895,	0.575060435132958,	-0.669822723609992,	0.000146018225797333,	0.000170131327305149,	-0.000684544159471899},
	{0.000671386718750000,	-0.0249023437500000,	0.974609375000000,	0.312207896857373,	0.570547945205480,	-0.692103142626914,	0.000125923974540819,	0.000137980525294727,	-0.000379111540372891},
	{0.00225830078125000,	-0.0241699218750000,	0.969787597656250,	0.322925060435133,	0.588033843674456,	-0.649798549556809,	0.000127263591291253,	0.000175489794306886,	-0.000340262654610298},
	{0.000427246093750000,	-0.0252685546875000,	0.975158691406250,	0.316156325543916,	0.588597904915391,	-0.673207091055600,	0.000144678609046898,	0.000178169027807754,	-0.000361696522617246},
	{-0.00262451171875000,	-0.0248413085937500,	0.973022460937500,	0.306567284448026,	0.575060435132958,	-0.668694601128123,	0.000168791710554715,	0.000155395543050372,	-0.000403224641880708},
	{0.00115966796875000,	-0.0244750976562500,	0.975891113281250,	0.313336019339243,	0.583521353746978,	-0.670950846091862,	0.000133961675043424,	0.000146018225797333,	-0.000403224641880708},
	{0.00146484375000000,	-0.0252685546875000,	0.974426269531250,	0.326873489121676,	0.578444802578566,	-0.672360999194198,	0.000179508644558189,	0.000207640596317308,	-0.000369734223119851},
	{0.00183105468750000,	-0.0239257812500000,	0.977233886718750,	0.306003223207091,	0.581829170024174,	-0.685052377115230,	0.000123244741039951,	0.000156735159800807,	-0.000391168091126799},
	{0.000915527343750000,	-0.0252685546875000,	0.972229003906250,	0.315028203062047,	0.579572925060435,	-0.673771152296535,	8.97543222790944e-05,	0.000163433243552978,	-0.000396526558128536},
	{0.000793457031250000,	-0.0253295898437500,	0.974060058593750,	0.311643835616438,	0.586905721192587,	-0.660797743755036,	0.000113867423786911,	0.000221036763821650,	-0.000345621121612035},
	{0.00115966796875000,	-0.0242309570312500,	0.977233886718750,	0.317848509266720,	0.578444802578566,	-0.671514907332796,	0.000167452093804281,	0.000190225578561663,	-0.000405903875381576},
	{0.00207519531250000,	-0.0271606445312500,	0.974548339843750,	0.299798549556809,	0.588033843674456,	-0.683924254633360,	0.000137980525294727,	0.000147357842547767,	-0.000360356905866812},
	{0.000549316406250000,	-0.0250244140625000,	0.974670410156250,	0.320668815471394,	0.589726027397260,	-0.681103948428687,	0.000121905124289516,	0.000152716309549504,	-0.000365715372868549},
	{-0.000183105468750000,	-0.0264892578125000,	0.976623535156250,	0.319540692989525,	0.582957292506044,	-0.662771958098308,	0.000121905124289516,	0.000163433243552978,	-0.000369734223119851},
	{0.00140380859375000,	-0.0247192382812500,	0.975463867187500,	0.319540692989525,	0.600443190975020,	-0.687872683319903,	0.000104490106533871,	0.000194244428812965,	-0.000359017289116378},
	{0.00183105468750000,	-0.0245361328125000,	0.974487304687500,	0.317848509266720,	0.583521353746978,	-0.681668009669621,	0.000129942824792122,	0.000192904812062531,	-0.000396526558128536},
	{0.000671386718750000,	-0.0252075195312500,	0.975463867187500,	0.308259468170830,	0.567727639000806,	-0.675745366639807,	9.64524060312656e-05,	0.000192904812062531,	-0.000361696522617246},
	{-0.0150146484375000,	-0.0249633789062500,	0.977416992187500,	0.312771958098308,	0.593110394842869,	-0.676309427880741,	0.000148697459298201,	0.000222376380572085,	-0.000360356905866812},
	{0.00292968750000000,	-0.0243530273437500,	0.975463867187500,	0.314464141821112,	0.605519742143433,	-0.672360999194198,	0.000150037076048635,	0.000178169027807754,	-0.000341602271360732},
	{0.000915527343750000,	-0.0249023437500000,	0.973327636718750,	0.311079774375504,	0.596494762288477,	-0.671514907332796,	0.000124584357790385,	0.000212999063319045,	-0.000336243804358995},
	{-6.10351562500000e-05,	-0.0248413085937500,	0.976623535156250,	0.314464141821112,	0.593110394842869,	-0.677155519742144,	0.000172810560806018,	0.000167452093804281,	-0.000349639971863338},
	{-0.000976562500000000,	-0.0252075195312500,	0.975646972656250,	0.313900080580177,	0.602699435938759,	-0.687308622078969,	0.000156735159800807,	0.000218357530320782,	-0.000421979276386787},
	{-0.000244140625000000,	-0.0256347656250000,	0.977111816406250,	0.306003223207091,	0.580701047542305,	-0.683360193392426,	0.000166112477053846,	0.000182187878059057,	-0.000412601959133747},
	{-0.00140380859375000,	-0.0272827148437500,	0.981018066406250,	0.307131345688961,	0.593110394842869,	-0.676873489121676,	0.000135301291793859,	0.000188885961811228,	-0.000296055301845968},
	{-0.00158691406250000,	-0.0282592773437500,	0.974121093750000,	0.309387590652700,	0.588033843674456,	-0.693513295729251,	0.000151376692799070,	0.000168791710554715,	-0.000364375756118114},
	{0.000122070312500000,	-0.0239868164062500,	0.973571777343750,	0.293593875906527,	0.590290088638195,	-0.661925866236906,	0.000147357842547767,	0.000148697459298201,	-0.000361696522617246},
	{0.00280761718750000,	-0.0250244140625000,	0.975463867187500,	0.312207896857373,	0.583521353746978,	-0.685334407735697,	0.000182187878059057,	0.000160754010052109,	-0.000364375756118114},
	{-0.000671386718750000,	-0.0238037109375000,	0.974121093750000,	0.294721998388396,	0.584649476228848,	-0.679693795326350,	0.000117886274038213,	0.000151376692799070,	-0.000381790773873760},
	{-0.000122070312500000,	-0.0253906250000000,	0.976806640625000,	0.302618855761483,	0.591418211120064,	-0.668412570507655,	0.000156735159800807,	0.000176829411057320,	-0.000344281504861601},
	{0.000549316406250000,	-0.0254516601562500,	0.973510742187500,	0.322925060435133,	0.564907332796132,	-0.679129734085415,	0.000129942824792122,	0.000172810560806018,	-0.000357677672365943},
	{0.000427246093750000,	-0.0259399414062500,	0.977722167968750,	0.302618855761483,	0.583521353746978,	-0.675181305398872,	0.000131282441542556,	0.000170131327305149,	-0.000420639659636353},
	{0.00402832031250000,	-0.0255126953125000,	0.976623535156250,	0.307695406929895,	0.586905721192587,	-0.664746172441579,	9.77920227816998e-05,	0.000190225578561663,	-0.000383130390624194},
	{0.000976562500000000,	-0.0262451171875000,	0.977478027343750,	0.313336019339243,	0.586905721192587,	-0.656003223207091,	0.000137980525294727,	0.000160754010052109,	-0.000334904187608561},
	{0.000244140625000000,	-0.0261230468750000,	0.973083496093750,	0.325181305398872,	0.589726027397260,	-0.666438356164384,	0.000129942824792122,	0.000158074776551241,	-0.000363036139367680},
	{-0.000915527343750000,	-0.0245361328125000,	0.974487304687500,	0.308259468170830,	0.594238517324738,	-0.660797743755036,	0.000137980525294727,	0.000226395230823387,	-0.000346960738362469},
	{-6.10351562500000e-05,	-0.0252075195312500,	0.975524902343750,	0.312207896857373,	0.575624496373892,	-0.677155519742144,	0.000144678609046898,	0.000176829411057320,	-0.000376432306872023},
	{-0.000244140625000000,	-0.0249633789062500,	0.976806640625000,	0.306003223207091,	0.586905721192587,	-0.673489121676068,	0.000131282441542556,	0.000211659446568611,	-0.000377771923622457},
	{0.000244140625000000,	-0.0249023437500000,	0.976135253906250,	0.303182917002417,	0.581265108783239,	-0.683924254633360,	0.000148697459298201,	0.000174150177556452,	-0.000365715372868549},
	{0.00146484375000000,	-0.0256958007812500,	0.975952148437500,	0.303182917002417,	0.581829170024174,	-0.692385173247381,	0.000116546657287779,	0.000176829411057320,	-0.000350979588613772},
	{-0.000244140625000000,	-0.0255126953125000,	0.975219726562500,	0.326873489121676,	0.588033843674456,	-0.676873489121676,	0.000160754010052109,	0.000174150177556452,	-0.000363036139367680},
	{6.10351562500000e-05,	-0.0260009765625000,	0.975830078125000,	0.304875100725222,	0.596494762288477,	-0.663618049959710,	0.000148697459298201,	0.000204961362816439,	-0.000376432306872023},
	{0.00219726562500000,	-0.0272216796875000,	0.976013183593750,	0.314464141821112,	0.579008863819501,	-0.687026591458501,	0.000146018225797333,	0.000212999063319045,	-0.000348300355112904},
	{-0.00280761718750000,	-0.0292968750000000,	0.972290039062500,	0.307131345688961,	0.584649476228848,	-0.694923448831588,	0.000132622058292990,	0.000168791710554715,	-0.000316149553102482},
	{0.000976562500000000,	-0.0252075195312500,	0.975280761718750,	0.303746978243352,	0.581265108783239,	-0.666438356164384,	0.000117886274038213,	0.000204961362816439,	-0.000450111228145906},
	{-0.000244140625000000,	-0.0254516601562500,	0.976318359375000,	0.308259468170830,	0.579008863819501,	-0.692103142626914,	0.000178169027807754,	0.000179508644558189,	-0.000354998438865075},
	{-0.000183105468750000,	-0.0250854492187500,	0.972595214843750,	0.313900080580177,	0.589161966156326,	-0.692667203867849,	0.000163433243552978,	0.000226395230823387,	-0.000361696522617246},
	{0.000854492187500000,	-0.0253906250000000,	0.981018066406250,	0.311079774375504,	0.598186946011281,	-0.682232070910556,	0.000150037076048635,	0.000191565195312097,	-0.000375092690121588},
	{0.000427246093750000,	-0.0260620117187500,	0.974243164062500,	0.318412570507655,	0.591418211120064,	-0.680539887187752,	0.000116546657287779,	0.000207640596317308,	-0.000338923037859864},
	{0.00268554687500000,	-0.0236816406250000,	0.978942871093750,	0.301490733279613,	0.578444802578566,	-0.660515713134569,	0.000121905124289516,	0.000160754010052109,	-0.000360356905866812},
	{0.0155639648437500,	-0.0249633789062500,	0.975952148437500,	0.315592264302982,	0.579008863819501,	-0.682232070910556,	0.000143338992296464,	0.000172810560806018,	-0.000359017289116378},
	{0.00292968750000000,	-0.0267333984375000,	0.978698730468750,	0.308823529411765,	0.602135374697824,	-0.683642224012893,	0.000127263591291253,	0.000164772860303412,	-0.000389828474376365},
	{-0.00207519531250000,	-0.0249023437500000,	0.980224609375000,	0.314464141821112,	0.576752618855762,	-0.681385979049154,	0.000135301291793859,	0.000202282129315571,	-0.000300074152097271},
	{-0.000122070312500000,	-0.0257568359375000,	0.976867675781250,	0.310515713134569,	0.593110394842869,	-0.668412570507655,	0.000115207040537345,	0.000139320142045161,	-0.000391168091126799},
	{-0.000732421875000000,	-0.0264282226562500,	0.972045898437500,	0.325181305398872,	0.590290088638195,	-0.661079774375504,	0.000128603208041687,	0.000162093626802544,	-0.000360356905866812},
	{-0.00134277343750000,	-0.0258178710937500,	0.975524902343750,	0.312207896857373,	0.601007252215955,	-0.689282836422240,	0.000168791710554715,	0.000212999063319045,	-0.000337583421109430},
	{0.00103759765625000,	-0.0252685546875000,	0.974426269531250,	0.318412570507655,	0.591982272360999,	-0.643311845286060,	0.000144678609046898,	0.000182187878059057,	-0.000399205791629405},
	{0.000549316406250000,	-0.0251464843750000,	0.976623535156250,	0.316156325543916,	0.592546333601934,	-0.673207091055600,	0.000151376692799070,	0.000176829411057320,	-0.000348300355112904},
	{6.10351562500000e-05,	-0.0238647460937500,	0.975891113281250,	0.322925060435133,	0.585213537469783,	-0.676873489121676,	0.000117886274038213,	0.000192904812062531,	-0.000675166842218859},
	{-6.10351562500000e-05,	-0.0265502929687500,	0.975769042968750,	0.321796937953264,	0.598751007252216,	-0.671796937953264,	0.000123244741039951,	0.000140659758795596,	-0.000317489169852916},
	{6.10351562500000e-05,	-0.0230712890625000,	0.976806640625000,	0.324617244157937,	0.573932312651088,	-0.711281224818695,	0.000155395543050372,	0.000174150177556452,	-0.000367054989618983},
	{0.00207519531250000,	-0.0241088867187500,	0.976867675781250,	0.317284448025786,	0.594802578565673,	-0.682796132151491,	0.000135301291793859,	0.000214338680069479,	-0.000353658822114640},
	{-0.000610351562500000,	-0.0260009765625000,	0.977905273437500,	0.322360999194198,	0.582957292506044,	-0.682232070910556,	0.000162093626802544,	0.000208980213067742,	-0.000365715372868549},
	{-0.000610351562500000,	-0.0240478515625000,	0.977600097656250,	0.327437550362611,	0.597058823529412,	-0.681385979049154,	0.000115207040537345,	0.000166112477053846,	-0.000392507707877234},
	{0.00372314453125000,	-0.0252685546875000,	0.972839355468750,	0.316720386784851,	0.581829170024174,	-0.686744560838034,	0.000176829411057320,	0.000179508644558189,	-0.000368394606369417}};

const float dt_set[100] = {0.0100000000000000,	2.00900000000000,	0.292000000000002,	0.545999999999999,	0.108000000000004,	0.140000000000001,	0.109999999999999,	0.111999999999995,	0.126000000000005,	0.126999999999995,	0.109999999999999,	0.125000000000000,	0.108000000000004,	0.110999999999997,	0.124000000000002,	0.109999999999999,	0.124000000000002,	0.108999999999995,	0.126000000000005,	0.109999999999999,	0.125000000000000,	0.109999999999999,	0.122999999999998,	0.126000000000005,	0.123999999999995,	0.124000000000002,	0.109999999999999,	0.121000000000002,	0.122000000000000,	0.126999999999995,	0.108000000000004,	0.122000000000000,	0.122999999999998,	0.125000000000000,	0.106999999999999,	0.123000000000005,	0.123999999999995,	0.120000000000005,	0.108999999999995,	0.112000000000002,	0.109999999999999,	0.124000000000002,	0.110999999999997,	0.126000000000005,	0.125999999999998,	0.122999999999998,	0.109000000000002,	0.122000000000000,	0.109999999999999,	0.127000000000002,	0.109999999999999,	0.106999999999999,	0.110999999999997,	0.111000000000004,	0.109999999999999,	0.110999999999997,	0.109000000000002,	0.124000000000002,	0.125999999999998,	0.125999999999998,	0.122000000000000,	0.124000000000002,	0.109999999999999,	0.109000000000002,	0.110999999999997,	0.112000000000002,	0.106999999999999,	0.0100000000000000,	0.110000000000000,	0.111000000000000,	0.123000000000000,	0.109000000000000,	0.125000000000000,	0.125000000000000,	0.124000000000000,	0.110000000000000,	0.107000000000000,	0.112000000000000,	0.123000000000000,	0.111000000000000,	0.124000000000000,	0.124000000000000,	0.123000000000000,	0.124000000000000,	0.110000000000000,	0.108000000000000,	0.127000000000000,	0.122000000000000,	0.125000000000000,	0.110000000000000,	0.108000000000000,	0.111000000000000,	0.109000000000000,	0.110000000000000,	0.124000000000000,	0.122000000000000,	0.108000000000000,	0.126000000000000,	0.109000000000000,	0.126000000000000};
*/


int quat_inv(float a[4], float b[4])
{
	float factor = 1 / (a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);
	b[0] = a[0] * factor;
	b[1] = -a[1] * factor;
	b[2] = -a[2] * factor;
	b[3] = -a[3] * factor;

	return 0;
}

int quat_mul(float a[4], float b[4], float ab[4])
{
	ab[0] = a[0] * b[0] - a[1] * b[1] - a[2] * b[2] - a[3] * b[3];
	ab[1] = a[0] * b[1] + a[1] * b[0] + a[2] * b[3] - a[3] * b[2];
	ab[2] = a[0] * b[2] - a[1] * b[3] + a[2] * b[0] + a[3] * b[1];
	ab[3] = a[0] * b[3] + a[1] * b[2] - a[2] * b[1] + a[3] * b[0];
	return 0;
}

int quat_norm(float a[4], float b[4])
{
	float factor = 1 / sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);
	b[0] = a[0] * factor;
	b[1] = a[1] * factor;
	b[2] = a[2] * factor;
	b[3] = a[3] * factor;

	return 0;
}

int quat2vec(float a[4], float b[3])
{
	float norm = sqrt(a[1] * a[1] + a[2] * a[2] + a[3] * a[3]);
	if (norm == 0)
	{

		b[0] = 0;
		b[1] = 0;
		b[2] = 0;
	}
	else
	{
		float theta;
		if (a[0] > 1)
			a[0] = 1;
		float theta_ = 2 * acos(a[0]);
		if (theta_ == 0)
			theta = 2.788630173671217e-04;
		else
			theta = theta_;

		float factor = theta / sin(theta / 2);

		b[0] = a[1] * factor;
		b[1] = a[2] * factor;
		b[2] = a[3] * factor;
	}

	return 0;
}

int vec2quat(float a[3], float b[4])
{
	float theta = sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
	if (theta == 0)
	{
		b[0] = cos(theta / 2);
		b[1] = 0;
		b[2] = 0;
		b[3] = 0;
	}
	else
	{
		float factor = sin(theta / 2) / theta;
		b[0] = cos(theta / 2);
		b[1] = a[0] * factor;
		b[2] = a[1] * factor;
		b[3] = a[2] * factor;
	}

	return 0;
}

int cholesky(float in[6][6], float out[6][6])
{

	for (int i = 0; i < 6; i++)
		for (int j = 0; j < 6; j++)
			out[i][j] = 0;

	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j <= i; j++)
		{
			float sum = 0;

			if (j == i) // summation for diagonals
			{
				for (int k = 0; k < j; k++)
					sum += (out[j][k] * out[j][k]);
				out[j][j] = sqrt(in[j][j] - sum) * sqrt(12);
			}
			else
			{

				// Evaluating L(i, j) using L(j, j)
				for (int k = 0; k < j; k++)
					sum += (out[i][k] * out[j][k]);
				out[i][j] = ((in[i][j] - sum) / out[j][j]) * sqrt(12);
			}
		}
	}

	return 0;
}

int inverse(float in[6][6], float out[6][6])
{
	int eye[6][6] = {{1, 0, 0, 0, 0, 0},
					 {0, 1, 0, 0, 0, 0},
					 {0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 1}};

	float A[6][12];

	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 6; j++)
		{

			// To store elements
			// of matrix A
			A[i][j] = in[i][j];

			// To store elements
			// of matrix B
			A[i][j + 6] = eye[i][j];
		}
	}

	float T[6][12];
	for (int i = 0; i < 6; i++)
		for (int j = 0; j < 12; j++)
			T[i][j] = 0;

	for (int i = 0; i < 6; i++)
	{
		for (int j = i; j <= i + 6; j++)
		{
			float sum = 0;

			if (j == i) // summation for diagonals
			{
				for (int k = 0; k < i; k++)
					sum += (T[k][i] * T[k][i]);
				T[i][i] = sqrt(A[i][i] - sum);
			}
			else
			{

				// Evaluating L(i, j) using L(j, j)
				for (int k = 0; k < i; k++)
					sum += (T[k][i] * T[k][j]);
				T[i][j] = (A[i][j] - sum) / T[i][i];
			}
		}
	}

	float T1[6][6];
	for (int i = 0; i < 6; i++)
		for (int j = 0; j < 6; j++)
			T1[i][j] = T[i][j + 6];

	float T1_transpose[6][6];
	for (int i = 0; i < 6; i++)
		for (int j = 0; j < 6; j++)
			T1_transpose[i][j] = T1[j][i];

	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 6; j++)
		{

			float sum = 0;
			for (int k = 0; k < 6; k++)
			{
				sum += T1_transpose[i][k] * T1[k][j];
			}
			out[i][j] = sum;
		}
	}
	return 0;
}

int inverse_9(float in[9][9], float out[9][9])
{
	int eye[9][9] = {{1, 0, 0, 0, 0, 0, 0, 0, 0},
					 {0, 1, 0, 0, 0, 0, 0, 0, 0},
					 {0, 0, 1, 0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 1, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 1, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 1, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0, 1, 0, 0},
					 {0, 0, 0, 0, 0, 0, 0, 1, 0},
					 {0, 0, 0, 0, 0, 0, 0, 0, 1}};

	float A[9][18];

	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
		{

			// To store elements
			// of matrix A
			A[i][j] = in[i][j];

			// To store elements
			// of matrix B
			A[i][j + 9] = eye[i][j];
		}
	}

	float T[9][18];
	for (int i = 0; i < 9; i++)
		for (int j = 0; j < 18; j++)
			T[i][j] = 0;

	for (int i = 0; i < 9; i++)
	{
		for (int j = i; j <= i + 9; j++)
		{
			float sum = 0;

			if (j == i) // summation for diagonals
			{
				for (int k = 0; k < i; k++)
					sum += (T[k][i] * T[k][i]);
				T[i][i] = sqrt(A[i][i] - sum);
			}
			else
			{

				// Evaluating L(i, j) using L(j, j)
				for (int k = 0; k < i; k++)
					sum += (T[k][i] * T[k][j]);
				T[i][j] = (A[i][j] - sum) / T[i][i];
			}
		}
	}

	float T1[9][9];
	for (int i = 0; i < 9; i++)
		for (int j = 0; j < 9; j++)
			T1[i][j] = T[i][j + 9];

	float T1_transpose[9][9];
	for (int i = 0; i < 9; i++)
		for (int j = 0; j < 9; j++)
			T1_transpose[i][j] = T1[j][i];

	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
		{

			float sum = 0;
			for (int k = 0; k < 9; k++)
			{
				sum += T1_transpose[i][k] * T1[k][j];
			}
			out[i][j] = sum;
		}
	}
	return 0;
}


int uk_filter_ag(P[6][6],state[7],data[6],d_t,P_u[6][6],state_u[7])
{
	printf("[");

	for (int s = 0; s < 100; s++)
	{

		

		float data[6];

		for (int i = 0; i < 3; i++)
		{
			data[i] = data_set[s][i];
			//		printf("%f, ",data[i]);
		}

		for (int i = 3; i < 6; i++)
		{
			data[i] = data_set[s][i+3];
			//		printf("%f, ",data[i]);
		}

		float d_t = dt_set[s];
		//	printf("%f, \n",d_t);

		float q[4] = {state[0], state[1], state[2], state[3]};
		float omega[3] = {state[4], state[5], state[6]};

		// ****************         sigma = generate_sigma_points(state,P,Q,n);        *****************

		float matrix_sig[6][6];
		for (int i = 0; i < 6; i++)
			for (int j = 0; j < 6; j++)
				matrix_sig[i][j] = P[i][j] + Q[i][j];

		float lower[6][6];
		cholesky(matrix_sig, lower);

		float lower_neg[6][6];
		for (int i = 0; i < 6; i++)
			for (int j = 0; j < 6; j++)
				lower_neg[i][j] = -lower[i][j];

		float W_sig[6][12]; //append 2 matrices
		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				W_sig[i][j] = lower[i][j];
				W_sig[i][j + 6] = lower_neg[i][j];
			}
		}

		float sigma[7][13];
		for (int i = 0; i < 12; i++)
		{

			float vec[3] = {W_sig[0][i], W_sig[1][i], W_sig[2][i]};
			float q_[4];
			vec2quat(vec, q_);

			float p[4];
			for (int k = 0; k < 4; k++)
				p[k] = q[k];

			float Qmul[4];
			quat_mul(p, q_, Qmul);

			float Qnorm[4];
			quat_norm(Qmul, Qnorm);

			for (int j = 0; j < 4; j++)
				sigma[j][i] = Qnorm[j];
		}

		for (int i = 0; i < 4; i++)
			sigma[i][12] = q[i];

		for (int i = 0; i < 12; i++)
		{
			sigma[4][i] = omega[0] + W_sig[3][i];
			sigma[5][i] = omega[1] + W_sig[4][i];
			sigma[6][i] = omega[2] + W_sig[5][i];
		}

		sigma[4][12] = omega[0];
		sigma[5][12] = omega[1];
		sigma[6][12] = omega[2];

		//   %%%%%%%%%%%%%%%%%%%%%%%%%    Y = Process_model_A(sigma,dt,M);  %%%%%%%%%%%%%%%%%%%%%%%%%

		float Y[7][13];

		for (int i = 0; i < 13; i++)
		{

			float normW = sqrt(sigma[4][i] * sigma[4][i] + sigma[5][i] * sigma[5][i] + sigma[6][i] * sigma[6][i]);

			if (normW == 0)
			{
				Y[0][i] = 1;
				Y[1][i] = 0;
				Y[2][i] = 0;
				Y[3][i] = 0;
			}

			else
			{

				float vec[3] = {sigma[4][i] * d_t, sigma[5][i] * d_t, sigma[6][i] * d_t};
				float q[4];
				vec2quat(vec, q);

				float p[4];
				for (int j = 0; j < 4; j++)
					p[j] = sigma[j][i];

				float Qmul[4];
				quat_mul(p, q, Qmul);

				float Qnorm[4];
				quat_norm(Qmul, Qnorm);

				for (int j = 0; j < 4; j++)
				{
					Y[0][i] = Qnorm[0];
					Y[1][i] = Qnorm[1];
					Y[2][i] = Qnorm[2];
					Y[3][i] = Qnorm[3];
				}
			}
		}
		for (int i = 0; i < 13; i++)
		{
			Y[4][i] = sigma[4][i];
			Y[5][i] = sigma[5][i];
			Y[6][i] = sigma[6][i];
		}

		//  %%%%%%%%%%%%%%%%    [x_bar, Pxx, Wdash] = cal_mean_and_covariance(Y,state,M);     %%%%%%%%%%%%%%%%%%%%

		float x_bar[7];
		float Pxx[6][6];
		float Wdash[6][13];

		float q_inv[4];
		quat_inv(q, q_inv);

		float condition = 1;
		float e_avg[3];

		for (int j = 0; j < 100 & condition >= 0.01; j++)
		{

			float e_vec[3][13];

			for (int i = 0; i < 13; i++)
			{

				float p[4];
				for (int k = 0; k < 4; k++)
					p[k] = Y[k][i];

				float Qmul[4];
				quat_mul(p, q_inv, Qmul);

				float e_norm[4];
				quat_norm(Qmul, e_norm);

				float e_ve[3];
				quat2vec(e_norm, e_ve);

				float norm = sqrt(pow(e_ve[0], 2) + pow(e_ve[1], 2) + pow(e_ve[2], 2));
				if (norm == 0)
				{

					e_vec[0][i] = 0;
					e_vec[1][i] = 0;
					e_vec[2][i] = 0;
				}
				else
				{
					float factor = (-3.141592653589793 + fmod((norm + 3.141592653589793), (2 * 3.141592653589793))) / norm;
					e_vec[0][i] = e_ve[0] * factor;
					e_vec[1][i] = e_ve[1] * factor;
					e_vec[2][i] = e_ve[2] * factor;
				}
			}

			float e_sum[3];
			for (int i = 0; i < 3; i++)
				e_sum[i] = 0;

			for (int i = 0; i < 13; i++)
			{
				e_sum[0] += e_vec[0][i];
				e_sum[1] += e_vec[1][i];
				e_sum[2] += e_vec[2][i];
			}

			for (int i = 0; i < 3; i++)
				e_avg[i] = e_sum[i] / 13;

			condition = sqrt(e_avg[0] * e_avg[0] + e_avg[1] * e_avg[1] + e_avg[2] * e_avg[2]);
		}

		float p_0[4];
		vec2quat(e_avg, p_0);

		float Qmul_0[4];
		quat_mul(p_0, q, Qmul_0);

		float mean_q[4];
		quat_norm(Qmul_0, mean_q);

		float mean_q_[4];
		quat_norm(mean_q, mean_q_);

		for (int i = 0; i < 4; i++)
			x_bar[i] = mean_q_[i];

		float w_sum[3];
		for (int i = 0; i < 3; i++)
			w_sum[i] = 0;

		for (int i = 0; i < 13; i++)
		{
			w_sum[0] += Y[4][i];
			w_sum[1] += Y[5][i];
			w_sum[2] += Y[6][i];
		}

		for (int i = 0; i < 3; i++)
			x_bar[i + 4] = w_sum[i] / 13;

		float p_1[4];
		float f_in[4] = {x_bar[0], x_bar[1], x_bar[2], x_bar[3]};
		quat_inv(f_in, p_1);

		float YMeanCentered[7][13];
		for (int i = 0; i < 13; i++)
		{
			float q[4];
			for (int j = 0; j < 4; j++)
				q[j] = Y[j][i];

			float Qmul[4];
			quat_mul(p_1, q, Qmul);

			for (int j = 0; j < 4; j++)
				YMeanCentered[j][i] = Qmul[j];

			for (int j = 4; j < 7; j++)
				YMeanCentered[j][i] = Y[j][i] - x_bar[j];
		}

		for (int i = 0; i < 13; i++)
		{

			float norm = sqrt(pow(YMeanCentered[1][i], 2) + pow(YMeanCentered[2][i], 2) + pow(YMeanCentered[3][i], 2));
			if (norm == 0)
			{

				Wdash[0][i] = 0;
				Wdash[1][i] = 0;
				Wdash[2][i] = 0;
			}
			else
			{
				float theta;
				if (YMeanCentered[0][i] > 1)
					YMeanCentered[0][i] = 1;
				float theta_ = 2 * acos(YMeanCentered[0][i]);
				if (theta_ == 0)
					theta = 2.788630173671217e-04;
				else
					theta = theta_;

				float factor = theta / sin(theta / 2);
				Wdash[0][i] = YMeanCentered[1][i] * factor;
				Wdash[1][i] = YMeanCentered[2][i] * factor;
				Wdash[2][i] = YMeanCentered[3][i] * factor;
			}

			for (int j = 3; j < 6; j++)
				Wdash[j][i] = YMeanCentered[j + 1][i];
		}

		float Wdash_trans[13][6];
		for (int i = 0; i < 13; i++)
			for (int j = 0; j < 6; j++)
				Wdash_trans[i][j] = Wdash[j][i];

		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				float sum = 0;

				for (int k = 0; k < 13; k++)
				{
					sum += Wdash[i][k] * Wdash_trans[k][j];
				}
				Pxx[i][j] = sum / 12;
			}
		}

		//%%%%%%%%%%%%%%%%%%%%%%%%%  Z = Measurement_model_H(Y, M);    %%%%%%%%%%%%%%%%%%%%%%

		float Z[6][13];
		float quat_g[4] = {0, 0, 0, 1};
		
		for (int i = 0; i < 13; i++)
		{

			float q_inv[4];
			float f_in0[4] = {Y[0][i], Y[1][i], Y[2][i], Y[3][i]};
			quat_inv(f_in0, q_inv);

			float Qmul[4];
			quat_mul(q_inv, quat_g, Qmul);

			float prod[4];
			quat_mul(Qmul, f_in0, prod);

			float vec_0[3];
			quat2vec(prod, vec_0);

			for (int j = 0; j < 3; j++)
				Z[j][i] = vec_0[j];

			Z[3][i] = Y[4][i];
			Z[4][i] = Y[5][i];
			Z[5][i] = Y[6][i];
		}

		// #############        [mean_Zk, K, Pvv] = cal_mean_and_KalmanGain(Z,R,Wdash);       #################

		float mean_Zk[6];
		float K[6][6];
		float Pvv[6][6];

		float Z_sum[6];
		for (int i = 0; i < 6; i++)
			Z_sum[i] = 0;

		for (int i = 0; i < 13; i++)
			for (int j = 0; j < 6; j++)
				Z_sum[j] += Z[j][i];

		for (int i = 0; i < 6; i++)
			mean_Zk[i] = Z_sum[i] / 13;

		float ZMeanCentered[6][13];
		for (int i = 0; i < 13; i++)
			for (int j = 0; j < 6; j++)
				ZMeanCentered[j][i] = Z[j][i] - mean_Zk[j];

		float ZMeanCentered_trans[13][6];
		for (int i = 0; i < 13; i++)
			for (int j = 0; j < 6; j++)
				ZMeanCentered_trans[i][j] = ZMeanCentered[j][i];

		float Pzz[6][6];
		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				float sum = 0;

				for (int k = 0; k < 13; k++)
				{
					sum += ZMeanCentered[i][k] * ZMeanCentered_trans[k][j];
				}
				Pzz[i][j] = sum / 12;
			}
		}

		for (int i = 0; i < 6; i++)
			for (int j = 0; j < 6; j++)
				Pvv[i][j] = Pzz[i][j] + R[i][j];

		float Pxz[6][6];
		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				float sum = 0;

				for (int k = 0; k < 13; k++)
				{
					sum += Wdash[i][k] * ZMeanCentered_trans[k][j];
				}
				Pxz[i][j] = sum / 12;
			}
		}

		float Pvv_inv[6][6];
		inverse(Pvv, Pvv_inv);

		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 6; j++)
			{

				float sum = 0;
				for (int k = 0; k < 6; k++)
				{
					sum += Pxz[i][k] * Pvv_inv[k][j];
				}
				K[i][j] = sum;
			}
		}

		// ################  [state_u, P_u] = update(x_bar, Pxx, Pvv, K, data, mean_Zk);    ########################

		float state_u[7];
		float P_u[6][6];

		float vk[6];
		for (int i = 0; i < 6; i++)
			vk[i] = data[i] - mean_Zk[i];

		float Mul[6];
		for (int i = 0; i < 6; i++)
		{

			float sum = 0;
			for (int k = 0; k < 6; k++)
			{
				sum += K[i][k] * vk[k];
			}
			Mul[i] = sum;
		}

		float q_u[4];
		float f_in1[3] = {Mul[0], Mul[1], Mul[2]};
		vec2quat(f_in1, q_u);

		float p_u[4];
		for (int i = 0; i < 4; i++)
			p_u[i] = x_bar[i];

		float Qmul_u[4];
		quat_mul(p_u, q_u, Qmul_u);

		float mean_Q[4];
		quat_norm(Qmul_u, mean_Q);

		for (int i = 0; i < 4; i++)
			state_u[i] = mean_Q[i];

		state_u[4] = x_bar[4] + Mul[3];
		state_u[5] = x_bar[5] + Mul[4];
		state_u[6] = x_bar[6] + Mul[5];

		float Mat_mul[6][6];
		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 6; j++)
			{

				float sum = 0;
				for (int k = 0; k < 6; k++)
				{
					sum += K[i][k] * Pvv[k][j];
				}
				Mat_mul[i][j] = sum;
			}
		}

		float K_trans[6][6];
		for (int i = 0; i < 6; i++)
			for (int j = 0; j < 6; j++)
				K_trans[i][j] = K[j][i];

		float Mat_mul_1[6][6];
		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 6; j++)
			{

				float sum = 0;
				for (int k = 0; k < 6; k++)
				{
					sum += Mat_mul[i][k] * K_trans[k][j];
				}
				Mat_mul_1[i][j] = sum;
			}
		}

		for (int i = 0; i < 6; i++)
			for (int j = 0; j < 6; j++)
				P_u[i][j] = Pxx[i][j] - Mat_mul_1[i][j];

		for (int i = 0; i < 7; i++)
		{
			printf("%f, ", state[i]); // display the current element out of the array
		}
		printf(";\n");
	}
	printf("]");
	return 0;
}


int uk_filter_mag()
{

	const float Q[6][6] = {{100, 0, 0, 0, 0, 0},
						   {0, 100, 0, 0, 0, 0},
						   {0, 0, 100, 0, 0, 0},
						   {0, 0, 0, 0.100000000000000, 0, 0},
						   {0, 0, 0, 0, 0.100000000000000, 0},
						   {0, 0, 0, 0, 0, 0.100000000000000}};

	const float R[9][9] = {{0.5, 0, 0, 0, 0, 0, 0, 0, 0},
						   {0, 0.5, 0, 0, 0, 0, 0, 0, 0},
						   {0, 0, 0.5, 0, 0, 0, 0, 0, 0},
						   {0, 0, 0, 0.5, 0, 0, 0, 0, 0},
						   {0, 0, 0, 0, 0.5, 0, 0, 0, 0},
						   {0, 0, 0, 0, 0, 0.5, 0, 0, 0},
						   {0, 0, 0, 0, 0, 0, 0.01, 0, 0},
						   {0, 0, 0, 0, 0, 0, 0, 0.01, 0},
						   {0, 0, 0, 0, 0, 0, 0, 0, 0.01}};

	float state[7] = {1, 0, 0, 0, 0, 0, 0};

	float P[6][6] = {{0.0100000000000000, 0, 0, 0, 0, 0},
					 {0, 0.0100000000000000, 0, 0, 0, 0},
					 {0, 0, 0.0100000000000000, 0, 0, 0},
					 {0, 0, 0, 0.0100000000000000, 0, 0},
					 {0, 0, 0, 0, 0.0100000000000000, 0},
					 {0, 0, 0, 0, 0, 0.0100000000000000}};

	printf("[");

	for (int s = 0; s < 100; s++)
	{

		float data[9];

		for (int i = 0; i < 9; i++)
		{
			data[i] = data_set[s][i];
			//		printf("%f, ",data[i]);
		}

		float d_t = dt_set[s];
		//	printf("%f, \n",d_t);

		float q[4] = {state[0], state[1], state[2], state[3]};
		float omega[3] = {state[4], state[5], state[6]};

		// ****************         sigma = generate_sigma_points(state,P,Q,n);        *****************

		float matrix_sig[6][6];
		for (int i = 0; i < 6; i++)
			for (int j = 0; j < 6; j++)
				matrix_sig[i][j] = P[i][j] + Q[i][j];

		float lower[6][6];
		cholesky(matrix_sig, lower);

		float lower_neg[6][6];
		for (int i = 0; i < 6; i++)
			for (int j = 0; j < 6; j++)
				lower_neg[i][j] = -lower[i][j];

		float W_sig[6][12]; //append 2 matrices
		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				W_sig[i][j] = lower[i][j];
				W_sig[i][j + 6] = lower_neg[i][j];
			}
		}

		float sigma[7][13];
		for (int i = 0; i < 12; i++)
		{

			float vec[3] = {W_sig[0][i], W_sig[1][i], W_sig[2][i]};
			float q_[4];
			vec2quat(vec, q_);

			float p[4];
			for (int k = 0; k < 4; k++)
				p[k] = q[k];

			float Qmul[4];
			quat_mul(p, q_, Qmul);

			float Qnorm[4];
			quat_norm(Qmul, Qnorm);

			for (int j = 0; j < 4; j++)
				sigma[j][i] = Qnorm[j];
		}

		for (int i = 0; i < 4; i++)
			sigma[i][12] = q[i];

		for (int i = 0; i < 12; i++)
		{
			sigma[4][i] = omega[0] + W_sig[3][i];
			sigma[5][i] = omega[1] + W_sig[4][i];
			sigma[6][i] = omega[2] + W_sig[5][i];
		}

		sigma[4][12] = omega[0];
		sigma[5][12] = omega[1];
		sigma[6][12] = omega[2];

		//   %%%%%%%%%%%%%%%%%%%%%%%%%    Y = Process_model_A(sigma,dt,M);  %%%%%%%%%%%%%%%%%%%%%%%%%

		float Y[7][13];

		for (int i = 0; i < 13; i++)
		{

			float normW = sqrt(sigma[4][i] * sigma[4][i] + sigma[5][i] * sigma[5][i] + sigma[6][i] * sigma[6][i]);

			if (normW == 0)
			{
				Y[0][i] = 1;
				Y[1][i] = 0;
				Y[2][i] = 0;
				Y[3][i] = 0;
			}

			else
			{

				float vec[3] = {sigma[4][i] * d_t, sigma[5][i] * d_t, sigma[6][i] * d_t};
				float q[4];
				vec2quat(vec, q);

				float p[4];
				for (int j = 0; j < 4; j++)
					p[j] = sigma[j][i];

				float Qmul[4];
				quat_mul(p, q, Qmul);

				float Qnorm[4];
				quat_norm(Qmul, Qnorm);

				for (int j = 0; j < 4; j++)
				{
					Y[0][i] = Qnorm[0];
					Y[1][i] = Qnorm[1];
					Y[2][i] = Qnorm[2];
					Y[3][i] = Qnorm[3];
				}
			}
		}
		for (int i = 0; i < 13; i++)
		{
			Y[4][i] = sigma[4][i];
			Y[5][i] = sigma[5][i];
			Y[6][i] = sigma[6][i];
		}

		//  %%%%%%%%%%%%%%%%    [x_bar, Pxx, Wdash] = cal_mean_and_covariance(Y,state,M);     %%%%%%%%%%%%%%%%%%%%

		float x_bar[7];
		float Pxx[6][6];
		float Wdash[6][13];

		float q_inv[4];
		quat_inv(q, q_inv);

		float condition = 1;
		float e_avg[3];

		for (int j = 0; j < 100 & condition >= 0.01; j++)
		{

			float e_vec[3][13];

			for (int i = 0; i < 13; i++)
			{

				float p[4];
				for (int k = 0; k < 4; k++)
					p[k] = Y[k][i];

				float Qmul[4];
				quat_mul(p, q_inv, Qmul);

				float e_norm[4];
				quat_norm(Qmul, e_norm);

				float e_ve[3];
				quat2vec(e_norm, e_ve);

				float norm = sqrt(pow(e_ve[0], 2) + pow(e_ve[1], 2) + pow(e_ve[2], 2));
				if (norm == 0)
				{

					e_vec[0][i] = 0;
					e_vec[1][i] = 0;
					e_vec[2][i] = 0;
				}
				else
				{
					float factor = (-3.141592653589793 + fmod((norm + 3.141592653589793), (2 * 3.141592653589793))) / norm;
					e_vec[0][i] = e_ve[0] * factor;
					e_vec[1][i] = e_ve[1] * factor;
					e_vec[2][i] = e_ve[2] * factor;
				}
			}

			float e_sum[3];
			for (int i = 0; i < 3; i++)
				e_sum[i] = 0;

			for (int i = 0; i < 13; i++)
			{
				e_sum[0] += e_vec[0][i];
				e_sum[1] += e_vec[1][i];
				e_sum[2] += e_vec[2][i];
			}

			for (int i = 0; i < 3; i++)
				e_avg[i] = e_sum[i] / 13;

			condition = sqrt(e_avg[0] * e_avg[0] + e_avg[1] * e_avg[1] + e_avg[2] * e_avg[2]);
		}

		float p_0[4];
		vec2quat(e_avg, p_0);

		float Qmul_0[4];
		quat_mul(p_0, q, Qmul_0);

		float mean_q[4];
		quat_norm(Qmul_0, mean_q);

		float mean_q_[4];
		quat_norm(mean_q, mean_q_);

		for (int i = 0; i < 4; i++)
			x_bar[i] = mean_q_[i];

		float w_sum[3];
		for (int i = 0; i < 3; i++)
			w_sum[i] = 0;

		for (int i = 0; i < 13; i++)
		{
			w_sum[0] += Y[4][i];
			w_sum[1] += Y[5][i];
			w_sum[2] += Y[6][i];
		}

		for (int i = 0; i < 3; i++)
			x_bar[i + 4] = w_sum[i] / 13;

		float p_1[4];
		float f_in[4] = {x_bar[0], x_bar[1], x_bar[2], x_bar[3]};
		quat_inv(f_in, p_1);

		float YMeanCentered[7][13];
		for (int i = 0; i < 13; i++)
		{
			float q[4];
			for (int j = 0; j < 4; j++)
				q[j] = Y[j][i];

			float Qmul[4];
			quat_mul(p_1, q, Qmul);

			for (int j = 0; j < 4; j++)
				YMeanCentered[j][i] = Qmul[j];

			for (int j = 4; j < 7; j++)
				YMeanCentered[j][i] = Y[j][i] - x_bar[j];
		}

		for (int i = 0; i < 13; i++)
		{

			float norm = sqrt(pow(YMeanCentered[1][i], 2) + pow(YMeanCentered[2][i], 2) + pow(YMeanCentered[3][i], 2));
			if (norm == 0)
			{

				Wdash[0][i] = 0;
				Wdash[1][i] = 0;
				Wdash[2][i] = 0;
			}
			else
			{
				float theta;
				if (YMeanCentered[0][i] > 1)
					YMeanCentered[0][i] = 1;
				float theta_ = 2 * acos(YMeanCentered[0][i]);
				if (theta_ == 0)
					theta = 2.788630173671217e-04;
				else
					theta = theta_;

				float factor = theta / sin(theta / 2);
				Wdash[0][i] = YMeanCentered[1][i] * factor;
				Wdash[1][i] = YMeanCentered[2][i] * factor;
				Wdash[2][i] = YMeanCentered[3][i] * factor;
			}

			for (int j = 3; j < 6; j++)
				Wdash[j][i] = YMeanCentered[j + 1][i];
		}

		float Wdash_trans[13][6];
		for (int i = 0; i < 13; i++)
			for (int j = 0; j < 6; j++)
				Wdash_trans[i][j] = Wdash[j][i];

		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				float sum = 0;

				for (int k = 0; k < 13; k++)
				{
					sum += Wdash[i][k] * Wdash_trans[k][j];
				}
				Pxx[i][j] = sum / 12;
			}
		}

		//%%%%%%%%%%%%%%%%%%%%%%%%%  Z = Measurement_model_H(Y, M);    %%%%%%%%%%%%%%%%%%%%%%

		float Z[9][13];
		float quat_g[4] = {0, 0, 0, 1};
		float quat_m[4] = {0, 0.3907, 0, -0.9205}; // according to braunschweig. formula [0;cos(Inclination);0;-sin(Inclination)]

		for (int i = 0; i < 13; i++)
		{

			float q_inv[4];
			float f_in0[4] = {Y[0][i], Y[1][i], Y[2][i], Y[3][i]};
			quat_inv(f_in0, q_inv);

			float Qmul[4];
			quat_mul(q_inv, quat_g, Qmul);

			float prod[4];
			quat_mul(Qmul, f_in0, prod);

			float vec_0[3];
			quat2vec(prod, vec_0);

			for (int j = 0; j < 3; j++)
				Z[j][i] = vec_0[j];

			float Qmul1[4];
			quat_mul(q_inv, quat_m, Qmul1);

			float prod1[4];
			quat_mul(Qmul1, f_in0, prod1);

			float vec_1[3];
			quat2vec(prod1, vec_1);

			for (int j = 0; j < 3; j++)
				Z[j + 3][i] = vec_1[j];

			Z[6][i] = Y[4][i];
			Z[7][i] = Y[5][i];
			Z[8][i] = Y[6][i];
		}

		// #############        [mean_Zk, K, Pvv] = cal_mean_and_KalmanGain(Z,R,Wdash);       #################

		float mean_Zk[9];
		float K[6][9];
		float Pvv[9][9];

		float Z_sum[9];
		for (int i = 0; i < 9; i++)
			Z_sum[i] = 0;

		for (int i = 0; i < 13; i++)
			for (int j = 0; j < 9; j++)
				Z_sum[j] += Z[j][i];

		for (int i = 0; i < 9; i++)
			mean_Zk[i] = Z_sum[i] / 13;

		float ZMeanCentered[9][13];
		for (int i = 0; i < 13; i++)
			for (int j = 0; j < 9; j++)
				ZMeanCentered[j][i] = Z[j][i] - mean_Zk[j];

		float ZMeanCentered_trans[13][9];
		for (int i = 0; i < 13; i++)
			for (int j = 0; j < 9; j++)
				ZMeanCentered_trans[i][j] = ZMeanCentered[j][i];

		float Pzz[9][9];
		for (int i = 0; i < 9; i++)
		{
			for (int j = 0; j < 9; j++)
			{
				float sum = 0;

				for (int k = 0; k < 13; k++)
				{
					sum += ZMeanCentered[i][k] * ZMeanCentered_trans[k][j];
				}
				Pzz[i][j] = sum / 12;
			}
		}

		for (int i = 0; i < 9; i++)
			for (int j = 0; j < 9; j++)
				Pvv[i][j] = Pzz[i][j] + R[i][j];

		float Pxz[6][9];
		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 9; j++)
			{
				float sum = 0;

				for (int k = 0; k < 13; k++)
				{
					sum += Wdash[i][k] * ZMeanCentered_trans[k][j];
				}
				Pxz[i][j] = sum / 12;
			}
		}

		float Pvv_inv[9][9];
		inverse_9(Pvv, Pvv_inv);

		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 9; j++)
			{

				float sum = 0;
				for (int k = 0; k < 9; k++)
				{
					sum += Pxz[i][k] * Pvv_inv[k][j];
				}
				K[i][j] = sum;
			}
		}

		// ################  [state_u, P_u] = update(x_bar, Pxx, Pvv, K, data, mean_Zk);    ########################

		float state_u[7];
		float P_u[6][6];

		float vk[9];
		for (int i = 0; i < 9; i++)
			vk[i] = data[i] - mean_Zk[i];

		float Mul[6];
		for (int i = 0; i < 6; i++)
		{

			float sum = 0;
			for (int k = 0; k < 9; k++)
			{
				sum += K[i][k] * vk[k];
			}
			Mul[i] = sum;
		}

		float q_u[4];
		float f_in1[3] = {Mul[0], Mul[1], Mul[2]};
		vec2quat(f_in1, q_u);

		float p_u[4];
		for (int i = 0; i < 4; i++)
			p_u[i] = x_bar[i];

		float Qmul_u[4];
		quat_mul(p_u, q_u, Qmul_u);

		float mean_Q[4];
		quat_norm(Qmul_u, mean_Q);

		for (int i = 0; i < 4; i++)
			state_u[i] = mean_Q[i];

		state_u[4] = x_bar[4] + Mul[3];
		state_u[5] = x_bar[5] + Mul[4];
		state_u[6] = x_bar[6] + Mul[5];

		float Mat_mul[6][9];
		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 9; j++)
			{

				float sum = 0;
				for (int k = 0; k < 9; k++)
				{
					sum += K[i][k] * Pvv[k][j];
				}
				Mat_mul[i][j] = sum;
			}
		}

		float K_trans[9][6];
		for (int i = 0; i < 9; i++)
			for (int j = 0; j < 6; j++)
				K_trans[i][j] = K[j][i];

		float Mat_mul_1[6][9];
		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 6; j++)
			{

				float sum = 0;
				for (int k = 0; k < 9; k++)
				{
					sum += Mat_mul[i][k] * K_trans[k][j];
				}
				Mat_mul_1[i][j] = sum;
			}
		}

		for (int i = 0; i < 6; i++)
			for (int j = 0; j < 6; j++)
				P_u[i][j] = Pxx[i][j] - Mat_mul_1[i][j];

		for (int i = 0; i < 6; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				P[i][j] = P_u[i][j];
				//			printf("%f, ",P[i][j]);
			}
			//		printf("\n");
		}

		for (int i = 0; i < 7; i++)
		{
			state[i] = state_u[i];
			printf("%f, ", state[i]); // display the current element out of the array
		}
		printf(";\n");
	}
	printf("]");
	return 0;
}
